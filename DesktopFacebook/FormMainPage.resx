<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="m_PictureBox_ProfilePicture.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        J7y3xbE192W+LYzAdssILY35lOW6GA2ODmmV7uGxtiaTAgYZWbCDigTyOxCRa06mKyyzNb7HEcWV7OaL
        EGxm7GVCfVbJ81pIYcpC3WxsttYX5NwcVijwEGyhCdsEpGd+HJCLXDZ5eExkY44F3aPSGR9mY2hwroty
        HJcX2mYCYW869Jqu1ASeXnJF5XavtefA9u1fF5/odq+Tz/Q7V8Hn+p2pQ/XncjpdqiWth58T9m0oVgKa
        XAYHnMYxU1V9TjZm1Wr8bCpUvRkRChKJsw8KNkE62IaSHdHtM5cKxzjjTKuylHLS9lDWXrPYVjxrSLew
        1LEu8yKMlqtFrurN6DmrA9AqwfiY0ssuewaXBqwXu8KESRnK2EeoqzT0GxtafGlWAz50oBKkyNqPUVZH
        oGzpSp1VqJ86UgSInlxtPBVsnqNrbm1xpX/FbxShAqcsP2puy7dd3ralXuOP764aCpU7aHG4iFRr/gy/
        1KEu8Ckayu6WS30f5PQVOnld2upzd/xKThc7vxhg71YC7jClKu8DAJ3r/9oADAMBAAIAAwAAABDzzzzj
        TzDDDDDDDDzzDDjTDDDDghjDzzzzzzzzwxzwwyywwyxyyywwzyywzzzzyzzzzzzzzzxzwxyzzyxzyxwy
        wzzzzzzzzzzzygM88vDTzzzzzzzyzzzzzTTzjzzzzD2BXXX2vDDzjDzzDDDDyzzzzzzzzQVkAg31m3vz
        zzTzzzTzDzzzzzzzzyNV0ACX03h3RzzzzzTzzzDjzzjzzCD311jT303n2PDDDDDDDDAAhzzzzyxP33zX
        z33232vwizzyyxwzzzzzzzzhP3nw133Xnnz/AM8888888888888888b999o199951788888888M08088
        8884999Z999999X88888888wgAM8ossAV999Ax99599/AAgUYIAAAA8888884I199998959ts8840M88
        8w88888888sz99t9AEhAHc88s88888888888888889999kMAg088888888880808ss888sf95dAUIL08
        8w0g0s40AAs88880sA07909ggAD048g808884Ass888888Mc3959sNAD8880s88884A8888888888399
        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
</value>
  </data>
</root>